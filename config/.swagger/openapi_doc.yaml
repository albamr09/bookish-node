---
openapi: 3.0.0
info:
  title: Bookish API
  description: >
    # Introduction
    This is a simple book API
  contact:
    email: alba.martinez.rodriguez@protonmail.com
  license:
    name: MIT
    url: https://mit-license.org/
  version: 1.0.0
servers:
- url: https://api.example.com/v1
  description: Production server (uses live data)
- url: https://sandbox-api.example.com:8443/v1
  description: Sandbox server (uses test data)
tags:
- name: Users
  description: Operations available to users
paths:
  /status:
    get:
      tags:
      - Users
      summary: Returns the status of the API.
      description: |
        You get the status of the `API`.
      operationId: getStatus
      responses:
        "200":
          description: The `API`'s status was retrieved successfully.
          content:
            application/json:
              schema:
                type: string
  /books:
    get:
      tags:
      - Users
      summary: Returns a list of books.
      description: |
        You get the list of `Books` that match the query.
      operationId: getBooks
      parameters:
      - name: limit
        in: query
        description: The number of `Books` to show.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          example: 1
      - name: isbn
        in: query
        description: The isbn of the `Book`.
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: "978-3-16-148410-0"
      - name: title
        in: query
        description: The title of the `Book`.
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: City of Nebula
      - name: author
        in: query
        description: The name of the author of the `Book`.
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: Isaac Asimov
      - name: publisher
        in: query
        description: The name of the publisher of the `Book`.
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: Penguin Random House
      - name: language
        in: query
        description: The language in which the `Book` is written.
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/Language'
      - name: genre
        in: query
        description: The main theme of the `Book`.
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/Genre'
      responses:
        "200":
          description: The list was retrieved successfully.
          content:
            application/json:
              schema:
                required:
                  - books
                  - success
                properties:
                  books:
                    type: array
                    items:
                      $ref: '#/components/schemas/BasicBook'
                  success:
                    type: boolean
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: The specified resource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - Bearer: []
    post:
      tags:
      - Users
      summary: Creates a new Book.
      description: |
        A new `Book` is stored in the database with the data provided.
      operationId: createBook
      requestBody:
        description: New `Book` data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookProperties'
        required: true
      responses:
        "201":
          description: Book created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessBook'
        "400":
          description: The request is not correct
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - Bearer: []
  /books/{id}:
    get:
      tags:
      - Users
      summary: Returns information about a book.
      description: |
        You get detailed information about the `Book` with the specified id, if it exists.
      operationId: getBookById
      parameters:
      - name: id
        in: path
        description: Book ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: objectid
          example: 507f1f77bcf86cd799439011
      responses:
        "200":
          description: get the book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessBook'
        "400":
          description: The request is not correct
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: The specified resource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - Bearer: []
    put:
      tags:
      - Users
      summary: Updates information about a Book.
      description: |
        All of the information about the `Book` is replaced by the data provided.
      operationId: updateBook
      parameters:
      - name: id
        in: path
        description: ID of Book to update.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: objectid
          example: 507f1f77bcf86cd799439011
      requestBody:
        description: New `Book` data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookProperties'
        required: true
      responses:
        "200":
          description: Book updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessBook'
        "400":
          description: The request is not correct
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: The specified resource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - Bearer: []
    delete:
      tags:
      - Users
      summary: Deletes the book with the specified id.
      description: |
        The `Book` identified, if it exists, is removed.
      operationId: deleteBook
      parameters:
      - name: id
        in: path
        description: ID of Book to delete.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: objectid
          example: 507f1f77bcf86cd799439011
      responses:
        "204":
          description: Book deleted successfully.
        "400":
          description: The request is not correct
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: The specified resource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - Bearer: []
    patch:
      tags:
      - Users
      summary: Updates specific information about a Book.
      description: |
        Some of the information about the `Book` is replaced by the data provided.
      operationId: patchBook
      parameters:
      - name: id
        in: path
        description: ID of Book to update.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: objectid
          example: 507f1f77bcf86cd799439011
      requestBody:
        description: New `Book` data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookProperties'
        required: true
      responses:
        "200":
          description: Book updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessBook'
        "400":
          description: The request is not correct
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: The specified resource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - Bearer: []
  /users/login:
    post:
      tags:
      - Users
      summary: Logs the user in.
      description: |
        The user is logged in with its credentials.
      operationId: logUser
      requestBody:
        description: User credentials.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogUser'
        required: true
      responses:
        "200":
          description: User logged successfully.
          content:
            application/json:
              schema:
                required:
                  - token
                properties:
                  user:
                      allOf:
                        - $ref: '#/components/schemas/User'
                        - type: object
                      required:
                        - token
                      properties:
                        token:
                          type: string
                          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                  success:
                    type: boolean
        "400":
          description: The request is not correct
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/signup:
    post:
      tags:
      - Users
      summary: Logs the user in.
      description: |
        A new `User` is created with the data provided.
      operationId: createUser
      requestBody:
        description: User credentials.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
        required: true
      responses:
        "200":
          description: User created successfully.
          content:
            application/json:
              schema:
                required:
                  - token
                properties:
                  user:
                      allOf:
                        - $ref: '#/components/schemas/User'
                        - type: object
                      required:
                        - token
                      properties:
                        token:
                          type: string
                          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                  success:
                    type: boolean

        "400":
          description: The request is not correct
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    BasicUser:
      required:
      - email
      type: object
      properties:
        email:
          type: string
          format: email
          example: marco@email.com
    LogUser:
      required:
      - password
      properties:
        password:
          type: string
          format: password
          example: pass123
      allOf:
      - $ref: '#/components/schemas/BasicUser'
      - type: object
    NewUser:
      properties:
        name:
          type: string
          example: Marco
      allOf:
      - $ref: '#/components/schemas/LogUser'
      - type: object
    User:
      required:
      - id
      properties:
        id:
          type: string
          format: objectid
          example: 507f1f77bcf86cd799439011
        name:
          type: string
          example: Marco
      allOf:
      - $ref: '#/components/schemas/BasicUser'
      - type: object
    BookProperties:
      required:
      - isbn
      - title
      - author
      - langauge
      type: object
      properties:
        isbn:
          type: string
          example: 978-3-16-148410-0
        title:
          type: string
          example: City of Nebula
        edition:
          type: integer
          example: 1
        year_published:
          pattern: ^\d{4}$
          type: string
          example: "1984"
        author:
          $ref: '#/components/schemas/Author'
        publisher:
          type: string
          example: Penguin Random House
        language:
          $ref: '#/components/schemas/Language'
        genre:
          $ref: '#/components/schemas/Genre'
    BasicBook:
      required:
      - id
      - isbn
      - title
      type: object
      properties:
        id:
          type: string
          format: objectid
          example: '507f1f77bcf86cd799439011'
        isbn:
          type: string
          example: 978-3-16-148410-0
        title:
          type: string
          example: City of Nebula
        author:
          $ref: '#/components/schemas/Author'
    Book:
      required:
      - id
      properties:
        id:
          type: string
          format: objectid
          example: 507f1f77bcf86cd799439011
      allOf:
      - $ref: '#/components/schemas/BookProperties'
      - type: object
    SuccessBook:
      required:
      - book
      - success
      properties:
        book:
          $ref: '#/components/schemas/Book'
        success:
          type: boolean
    Author:
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: string
          format: objectid
          example: 507f1f77bcf86cd799439011
        name:
          type: string
          example: Isaac Asimov
        birth_date:
          type: string
          format: date
          example: 2017-07-21
    Genre:
      type: string
      enum:
        - fantasy
        - science_fiction
        - adventure
        - romance
        - horror
        - thriller
        - LGTBQ
        - mistery
        - science
    Language:
      type: string
      enum:
      - chinese
      - spanish
      - english
      - hindi
      - arabic
      - portuguese
      - bengali
      - russian
      - japanese
      - french
      - german
      - unknown
    Error:
      required:
      - code
      - success
      type: object
      properties:
        success:
          type: boolean
          example: false
        code:
          $ref: '#/components/schemas/Code'
        message:
          type: string
    Code:
      type: string
      enum:
      - "001"
      - "002"
      - "003"   
      
  responses:
    BadRequest:
      description: The request is not correct
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
