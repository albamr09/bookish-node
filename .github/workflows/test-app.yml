name: Build and Test

on:
  push:
    branches: [ deploy ]

jobs:

  app-dev:
    name: Build and test the app
    runs-on: ubuntu-latest
    env: 
      PORT: ${{ secrets.PORT }}
      HOST: ${{ secrets.HOST }}
      TOKEN_SECRET: ${{ secrets.TOKEN_SECRET }}
      DB_ROOT_USER: ${{ secrets.DB_ROOT_USER }}
      DB_ROOT_PASSWORD: ${{ secrets.DB_ROOT_PASSWORD }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_CONFIG: ${{ secrets.DB_CONFIG}}
      DB_INIT: ${{ secrets.DB_INIT }}
      DB_DATA: ${{ secrets.DB_CONFIG }}
      DB_URI: ${{ secrets.DB_URI }}
      SWAGGER_PORT: ${{ secrets.SWAGGER_PORT }}
      SWAGGER_DIR: ${{ secrets.SWAGGER_DIR }}
      SWAGGER_API_URL: ${{ secrets.SWAGGER_API_URL }}
      REDOC_PORT: ${{ secrets.REDOC_PORT }}
      REDOC_DIR: ${{ secrets.REDOC_DIR }}
      REDOC_SRC: ${{ secrets.REDOC_SRC }}
      REDOC_CONF: ${{ secrets.REDOC_CONF }}
      SECRETS_DIR: ${{ secrets.SECRETS_DIR }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Create docker secrets
        run: |
          mkdir -p ${{ secrets.SECRETS_DIR }}
          echo ${{ secrets.DB_ROOT_USER }} > ${{ secrets.SECRETS_DIR }}"/db_root_user"
          echo ${{ secrets.DB_ROOT_PASSWORD }} > ${{ secrets.SECRETS_DIR }}"/db_root_passwd"
          echo ${{ secrets.DB_USER }} > ${{ secrets.SECRETS_DIR }}"/db_user"
          echo ${{ secrets.DB_PASSWORD }} > ${{ secrets.SECRETS_DIR }}"/db_passwd"
          echo ${{ secrets.TOKEN_SECRET }} > ${{ secrets.SECRETS_DIR }}"/token_secret"
          echo ${{ secrets.DB_URI }} > ${{ secrets.SECRETS_DIR }}"/db_uri"
          echo ${{ secrets.DB_NAME }} > ${{ secrets.SECRETS_DIR }}"/db_name"
      - name: Check db_uri
        run: cat ${{ secrets.SECRETS_DIR }}"/db_uri"
      - name: Build docker images 
        run: docker-compose -f docker-compose.yml build --no-cache
      - name: Run test
        run: docker-compose -f "docker-compose.yml" run app sh -c "npm test && npm run lint"

